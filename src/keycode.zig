const c = @import("c.zig").c;
const scancode = @import("scancode.zig");
const std = @import("std");

/// The SDL virtual key representation.
///
/// Values of this type are used to represent keyboard keys using the current layout of the keyboard.
/// These values include Unicode values representing the unmodified character that would be generated by pressing the key,
/// or a constant for those keys that do not generate characters.
///
/// A special exception is the number keys at the top of the keyboard which map to `zero`...`nine` on AZERTY layouts.
///
/// Keys with the `Keycode.isExtended()` true do not map to a scancode or unicode code point.
///
/// ## Version
/// This datatype is available since SDL 3.2.0.
pub const Keycode = enum(c.SDL_Keycode) {
    return_key = c.SDLK_RETURN,
    escape = c.SDLK_ESCAPE,
    backspace = c.SDLK_BACKSPACE,
    tab = c.SDLK_TAB,
    space = c.SDLK_SPACE,
    exclaim = c.SDLK_EXCLAIM,
    dblapostrophe = c.SDLK_DBLAPOSTROPHE,
    hash = c.SDLK_HASH,
    dollar = c.SDLK_DOLLAR,
    percent = c.SDLK_PERCENT,
    ampersand = c.SDLK_AMPERSAND,
    apostrophe = c.SDLK_APOSTROPHE,
    left_paren = c.SDLK_LEFTPAREN,
    right_paren = c.SDLK_RIGHTPAREN,
    asterisk = c.SDLK_ASTERISK,
    plus = c.SDLK_PLUS,
    comma = c.SDLK_COMMA,
    minus = c.SDLK_MINUS,
    period = c.SDLK_PERIOD,
    slash = c.SDLK_SLASH,
    zero = c.SDLK_0,
    one = c.SDLK_1,
    two = c.SDLK_2,
    three = c.SDLK_3,
    four = c.SDLK_4,
    five = c.SDLK_5,
    six = c.SDLK_6,
    seven = c.SDLK_7,
    eight = c.SDLK_8,
    nine = c.SDLK_9,
    colon = c.SDLK_COLON,
    semicolon = c.SDLK_SEMICOLON,
    less = c.SDLK_LESS,
    equals = c.SDLK_EQUALS,
    greater = c.SDLK_GREATER,
    question = c.SDLK_QUESTION,
    at = c.SDLK_AT,
    left_bracket = c.SDLK_LEFTBRACKET,
    backslash = c.SDLK_BACKSLASH,
    right_bracket = c.SDLK_RIGHTBRACKET,
    caret = c.SDLK_CARET,
    underscore = c.SDLK_UNDERSCORE,
    grave = c.SDLK_GRAVE,
    a = c.SDLK_A,
    b = c.SDLK_B,
    c = c.SDLK_C,
    d = c.SDLK_D,
    e = c.SDLK_E,
    f = c.SDLK_F,
    g = c.SDLK_G,
    h = c.SDLK_H,
    i = c.SDLK_I,
    j = c.SDLK_J,
    k = c.SDLK_K,
    l = c.SDLK_L,
    m = c.SDLK_M,
    n = c.SDLK_N,
    o = c.SDLK_O,
    p = c.SDLK_P,
    q = c.SDLK_Q,
    r = c.SDLK_R,
    s = c.SDLK_S,
    t = c.SDLK_T,
    u = c.SDLK_U,
    v = c.SDLK_V,
    w = c.SDLK_W,
    x = c.SDLK_X,
    y = c.SDLK_Y,
    z = c.SDLK_Z,
    left_brace = c.SDLK_LEFTBRACE,
    pipe = c.SDLK_PIPE,
    right_brace = c.SDLK_RIGHTBRACE,
    tilde = c.SDLK_TILDE,
    delete = c.SDLK_DELETE,
    plus_minus = c.SDLK_PLUSMINUS,
    caps_lock = c.SDLK_CAPSLOCK,
    func1 = c.SDLK_F1,
    func2 = c.SDLK_F2,
    func3 = c.SDLK_F3,
    func4 = c.SDLK_F4,
    func5 = c.SDLK_F5,
    func6 = c.SDLK_F6,
    func7 = c.SDLK_F7,
    func8 = c.SDLK_F8,
    func9 = c.SDLK_F9,
    func10 = c.SDLK_F10,
    func11 = c.SDLK_F11,
    func12 = c.SDLK_F12,
    print_screen = c.SDLK_PRINTSCREEN,
    scroll_lock = c.SDLK_SCROLLLOCK,
    pause = c.SDLK_PAUSE,
    insert = c.SDLK_INSERT,
    home = c.SDLK_HOME,
    page_up = c.SDLK_PAGEUP,
    end = c.SDLK_END,
    page_down = c.SDLK_PAGEDOWN,
    right = c.SDLK_RIGHT,
    left = c.SDLK_LEFT,
    down = c.SDLK_DOWN,
    up = c.SDLK_UP,
    num_lock_clear = c.SDLK_NUMLOCKCLEAR,
    kp_divide = c.SDLK_KP_DIVIDE,
    kp_multiply = c.SDLK_KP_MULTIPLY,
    kp_minus = c.SDLK_KP_MINUS,
    kp_plus = c.SDLK_KP_PLUS,
    kp_enter = c.SDLK_KP_ENTER,
    kp_1 = c.SDLK_KP_1,
    kp_2 = c.SDLK_KP_2,
    kp_3 = c.SDLK_KP_3,
    kp_4 = c.SDLK_KP_4,
    kp_5 = c.SDLK_KP_5,
    kp_6 = c.SDLK_KP_6,
    kp_7 = c.SDLK_KP_7,
    kp_8 = c.SDLK_KP_8,
    kp_9 = c.SDLK_KP_9,
    kp_0 = c.SDLK_KP_0,
    kp_period = c.SDLK_KP_PERIOD,
    application = c.SDLK_APPLICATION,
    power = c.SDLK_POWER,
    kp_equals = c.SDLK_KP_EQUALS,
    func13 = c.SDLK_F13,
    func14 = c.SDLK_F14,
    func15 = c.SDLK_F15,
    func16 = c.SDLK_F16,
    func17 = c.SDLK_F17,
    func18 = c.SDLK_F18,
    func19 = c.SDLK_F19,
    func20 = c.SDLK_F20,
    func21 = c.SDLK_F21,
    func22 = c.SDLK_F22,
    func23 = c.SDLK_F23,
    func24 = c.SDLK_F24,
    execute = c.SDLK_EXECUTE,
    help = c.SDLK_HELP,
    menu = c.SDLK_MENU,
    select = c.SDLK_SELECT,
    stop = c.SDLK_STOP,
    again = c.SDLK_AGAIN,
    undo = c.SDLK_UNDO,
    cut = c.SDLK_CUT,
    copy = c.SDLK_COPY,
    paste = c.SDLK_PASTE,
    find = c.SDLK_FIND,
    mute = c.SDLK_MUTE,
    volume_up = c.SDLK_VOLUMEUP,
    volume_down = c.SDLK_VOLUMEDOWN,
    kp_comma = c.SDLK_KP_COMMA,
    kp_equals_as_400 = c.SDLK_KP_EQUALSAS400,
    alt_erase = c.SDLK_ALTERASE,
    sysreq = c.SDLK_SYSREQ,
    cancel = c.SDLK_CANCEL,
    clear = c.SDLK_CLEAR,
    prior = c.SDLK_PRIOR,
    return_key2 = c.SDLK_RETURN2,
    separator = c.SDLK_SEPARATOR,
    out = c.SDLK_OUT,
    oper = c.SDLK_OPER,
    clear_again = c.SDLK_CLEARAGAIN,
    cr_sel = c.SDLK_CRSEL,
    ex_sel = c.SDLK_EXSEL,
    kp_00 = c.SDLK_KP_00,
    kp_000 = c.SDLK_KP_000,
    thousands_separator = c.SDLK_THOUSANDSSEPARATOR,
    decimal_separator = c.SDLK_DECIMALSEPARATOR,
    currency_unit = c.SDLK_CURRENCYUNIT,
    currency_subunit = c.SDLK_CURRENCYSUBUNIT,
    kp_left_paren = c.SDLK_KP_LEFTPAREN,
    kp_right_paren = c.SDLK_KP_RIGHTPAREN,
    kp_left_brace = c.SDLK_KP_LEFTBRACE,
    kp_right_brace = c.SDLK_KP_RIGHTBRACE,
    kp_tab = c.SDLK_KP_TAB,
    kp_backspace = c.SDLK_KP_BACKSPACE,
    kp_a = c.SDLK_KP_A,
    kp_b = c.SDLK_KP_B,
    kp_c = c.SDLK_KP_C,
    kp_d = c.SDLK_KP_D,
    kp_e = c.SDLK_KP_E,
    kp_f = c.SDLK_KP_F,
    kp_xor = c.SDLK_KP_XOR,
    kp_power = c.SDLK_KP_POWER,
    kp_percent = c.SDLK_KP_PERCENT,
    kp_less = c.SDLK_KP_LESS,
    kp_greater = c.SDLK_KP_GREATER,
    kp_ampersand = c.SDLK_KP_AMPERSAND,
    kp_dblampersand = c.SDLK_KP_DBLAMPERSAND,
    kp_verticalbar = c.SDLK_KP_VERTICALBAR,
    kp_dbl_vertical_bar = c.SDLK_KP_DBLVERTICALBAR,
    kp_colon = c.SDLK_KP_COLON,
    kp_hash = c.SDLK_KP_HASH,
    kp_space = c.SDLK_KP_SPACE,
    kp_at = c.SDLK_KP_AT,
    kp_exclam = c.SDLK_KP_EXCLAM,
    kp_mem_store = c.SDLK_KP_MEMSTORE,
    kp_mem_recall = c.SDLK_KP_MEMRECALL,
    kp_mem_clear = c.SDLK_KP_MEMCLEAR,
    kp_mem_add = c.SDLK_KP_MEMADD,
    kp_mem_subtract = c.SDLK_KP_MEMSUBTRACT,
    kp_mem_multiply = c.SDLK_KP_MEMMULTIPLY,
    kp_mem_divide = c.SDLK_KP_MEMDIVIDE,
    kp_plus_minus = c.SDLK_KP_PLUSMINUS,
    kp_clear = c.SDLK_KP_CLEAR,
    kp_clear_entry = c.SDLK_KP_CLEARENTRY,
    kp_binary = c.SDLK_KP_BINARY,
    kp_octal = c.SDLK_KP_OCTAL,
    kp_decimal = c.SDLK_KP_DECIMAL,
    kp_hexadecimal = c.SDLK_KP_HEXADECIMAL,
    left_ctrl = c.SDLK_LCTRL,
    left_shift = c.SDLK_LSHIFT,
    left_alt = c.SDLK_LALT,
    left_gui = c.SDLK_LGUI,
    right_ctrl = c.SDLK_RCTRL,
    right_shift = c.SDLK_RSHIFT,
    right_alt = c.SDLK_RALT,
    right_gui = c.SDLK_RGUI,
    mode = c.SDLK_MODE,
    sleep = c.SDLK_SLEEP,
    wake = c.SDLK_WAKE,
    channel_increment = c.SDLK_CHANNEL_INCREMENT,
    channel_decrement = c.SDLK_CHANNEL_DECREMENT,
    media_play = c.SDLK_MEDIA_PLAY,
    media_pause = c.SDLK_MEDIA_PAUSE,
    media_record = c.SDLK_MEDIA_RECORD,
    media_fast_forward = c.SDLK_MEDIA_FAST_FORWARD,
    media_rewind = c.SDLK_MEDIA_REWIND,
    media_next_track = c.SDLK_MEDIA_NEXT_TRACK,
    media_previous_track = c.SDLK_MEDIA_PREVIOUS_TRACK,
    media_stop = c.SDLK_MEDIA_STOP,
    media_eject = c.SDLK_MEDIA_EJECT,
    media_play_pause = c.SDLK_MEDIA_PLAY_PAUSE,
    media_select = c.SDLK_MEDIA_SELECT,
    ac_new = c.SDLK_AC_NEW,
    ac_open = c.SDLK_AC_OPEN,
    ac_close = c.SDLK_AC_CLOSE,
    ac_exit = c.SDLK_AC_EXIT,
    ac_save = c.SDLK_AC_SAVE,
    ac_print = c.SDLK_AC_PRINT,
    ac_properties = c.SDLK_AC_PROPERTIES,
    ac_search = c.SDLK_AC_SEARCH,
    ac_home = c.SDLK_AC_HOME,
    ac_back = c.SDLK_AC_BACK,
    ac_forward = c.SDLK_AC_FORWARD,
    ac_stop = c.SDLK_AC_STOP,
    ac_refresh = c.SDLK_AC_REFRESH,
    ac_bookmarks = c.SDLK_AC_BOOKMARKS,
    soft_left = c.SDLK_SOFTLEFT,
    soft_right = c.SDLK_SOFTRIGHT,
    call = c.SDLK_CALL,
    end_call = c.SDLK_ENDCALL,
    left_tab = c.SDLK_LEFT_TAB,
    level5_shift = c.SDLK_LEVEL5_SHIFT,
    multi_key_compose = c.SDLK_MULTI_KEY_COMPOSE,
    left_meta = c.SDLK_LMETA,
    right_meta = c.SDLK_RMETA,
    left_hyper = c.SDLK_LHYPER,
    right_hyper = c.SDLK_RHYPER,
    _, // non-exhaustive enum for SDL compatibility

    /// Create a keycode from a scancode.
    ///
    /// ## Function Parameters
    /// * `code`: The scancode to convert to a keycode.
    ///
    /// ## Return Value
    /// The converted keycode.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn fromScancode(
        code: scancode.Scancode,
    ) ?Keycode {
        const ret = c.SDL_SCANCODE_TO_KEYCODE(code.toSdl());
        return Keycode.fromSdl(ret);
    }

    /// Returns if this keycode is extended.
    ///
    /// ## Function Parameters
    /// * `self`: The keycode to check.
    ///
    /// ## Return Value
    /// Returns if this keycode is extended.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn isExtended(
        self: Keycode,
    ) bool {
        return c.SDLK_EXTENDED_MASK & @intFromEnum(self) != 0;
    }

    /// Returns if this keycode maps to a scancode.
    ///
    /// ## Function Parameters
    /// * `self`: The keycode to check.
    ///
    /// ## Return Value
    /// Returns if this keycode maps to a scancode.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn isScancode(self: Keycode) bool {
        return c.SDLK_SCANCODE_MASK & @intFromEnum(self) != 0;
    }

    /// Create an unmanaged keycode from a keycode enum.
    ///
    /// ## Function Parameters
    /// * `self`: keycode enum to make unmanaged.
    ///
    /// ## Return Value
    /// Returns an unmanaged SDL keycode.
    ///
    /// ## Remarks
    /// This makes a copy of the keycode provided.
    ///
    /// ## Version
    /// This function is provided by zig-sdl3.
    pub fn toSdl(self: ?Keycode) c.SDL_Keycode {
        return if (self) |val| @intFromEnum(val) else c.SDLK_UNKNOWN;
    }

    /// Create a keycode enum from an SDL keycode.
    ///
    /// ## Function Parameters
    /// * `event`: SDL keycode to manage.
    ///
    /// ## Return Value
    /// A managed keycode enum.
    ///
    /// ## Remarks
    /// This makes a copy of the keycode provided.
    ///
    /// ## Version
    /// This function is provided by zig-sdl3.
    pub fn fromSdl(key_code: c.SDL_Keycode) ?Keycode {
        if (key_code == c.SDLK_UNKNOWN) return null;
        return @enumFromInt(key_code);
    }
};

/// Valid key modifiers.
///
/// ## Version
/// This datatype is available since SDL 3.2.0.
pub const KeyModifier = struct {
    left_shift: bool = false,
    right_shift: bool = false,
    level5_shift: bool = false,
    left_control: bool = false,
    right_control: bool = false,
    left_alt: bool = false,
    right_alt: bool = false,
    left_gui: bool = false,
    right_gui: bool = false,
    num_lock: bool = false,
    caps_lock: bool = false,
    mode: bool = false,
    scroll_lock: bool = false,

    /// No modifier is applicable.
    ///
    /// ## Version
    /// This constant is available since SDL 3.2.0.
    pub const none = KeyModifier{};

    /// Convert from an SDL value.
    pub fn fromSdl(flags: c.SDL_Keymod) KeyModifier {
        return .{
            .left_shift = (flags & c.SDL_KMOD_LSHIFT) != 0,
            .right_shift = (flags & c.SDL_KMOD_RSHIFT) != 0,
            .level5_shift = (flags & c.SDL_KMOD_LEVEL5) != 0,
            .left_control = (flags & c.SDL_KMOD_LCTRL) != 0,
            .right_control = (flags & c.SDL_KMOD_RCTRL) != 0,
            .left_alt = (flags & c.SDL_KMOD_LALT) != 0,
            .right_alt = (flags & c.SDL_KMOD_RALT) != 0,
            .left_gui = (flags & c.SDL_KMOD_LGUI) != 0,
            .right_gui = (flags & c.SDL_KMOD_RGUI) != 0,
            .num_lock = (flags & c.SDL_KMOD_NUM) != 0,
            .caps_lock = (flags & c.SDL_KMOD_CAPS) != 0,
            .mode = (flags & c.SDL_KMOD_MODE) != 0,
            .scroll_lock = (flags & c.SDL_KMOD_SCROLL) != 0,
        };
    }

    /// Convert to an SDL value.
    pub fn toSdl(self: KeyModifier) c.SDL_Keymod {
        return (if (self.left_shift) @as(c.SDL_Keymod, c.SDL_KMOD_LSHIFT) else 0) |
            (if (self.right_shift) @as(c.SDL_Keymod, c.SDL_KMOD_RSHIFT) else 0) |
            (if (self.level5_shift) @as(c.SDL_Keymod, c.SDL_KMOD_LEVEL5) else 0) |
            (if (self.left_control) @as(c.SDL_Keymod, c.SDL_KMOD_LCTRL) else 0) |
            (if (self.right_control) @as(c.SDL_Keymod, c.SDL_KMOD_RCTRL) else 0) |
            (if (self.left_alt) @as(c.SDL_Keymod, c.SDL_KMOD_LALT) else 0) |
            (if (self.right_alt) @as(c.SDL_Keymod, c.SDL_KMOD_RALT) else 0) |
            (if (self.left_gui) @as(c.SDL_Keymod, c.SDL_KMOD_LGUI) else 0) |
            (if (self.right_gui) @as(c.SDL_Keymod, c.SDL_KMOD_RGUI) else 0) |
            (if (self.num_lock) @as(c.SDL_Keymod, c.SDL_KMOD_NUM) else 0) |
            (if (self.caps_lock) @as(c.SDL_Keymod, c.SDL_KMOD_CAPS) else 0) |
            (if (self.mode) @as(c.SDL_Keymod, c.SDL_KMOD_MODE) else 0) |
            (if (self.scroll_lock) @as(c.SDL_Keymod, c.SDL_KMOD_SCROLL) else 0) |
            0;
    }

    /// If any control key is down.
    ///
    /// ## Function Parameters
    /// * `self`: Key modifiers to check.
    ///
    /// ## Return Value
    /// Returns if any control key is down.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn controlDown(self: KeyModifier) bool {
        return self.toSdl() & c.SDL_KMOD_CTRL != 0;
    }

    /// If any shift key is down.
    ///
    /// ## Function Parameters
    /// * `self`: Key modifiers to check.
    ///
    /// ## Return Value
    /// Returns if any shift key is down.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn shiftDown(self: KeyModifier) bool {
        return self.toSdl() & c.SDL_KMOD_SHIFT != 0;
    }

    /// If any alt key is down.
    ///
    /// ## Function Parameters
    /// * `self`: Key modifiers to check.
    ///
    /// ## Return Value
    /// Returns if any alt key is down.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn altDown(self: KeyModifier) bool {
        return self.toSdl() & c.SDL_KMOD_ALT != 0;
    }

    /// If any gui key is down.
    ///
    /// ## Function Parameters
    /// * `self`: Key modifiers to check.
    ///
    /// ## Return Value
    /// Returns if any gui key is down.
    ///
    /// ## Version
    /// This function is available since SDL 3.2.0.
    pub fn guiDown(self: KeyModifier) bool {
        return self.toSdl() & c.SDL_KMOD_GUI != 0;
    }
};

// Keycode testing.
test "Keycode" {
    std.testing.refAllDeclsRecursive(@This());

    const code = Keycode.fromScancode(.a).?;
    try std.testing.expect(code.isScancode());
    try std.testing.expect(!code.isExtended());

    const mod = KeyModifier{
        .left_control = true,
    };
    try std.testing.expect(mod.controlDown());
    try std.testing.expect(!mod.shiftDown());
    try std.testing.expect(!mod.altDown());
    try std.testing.expect(!mod.guiDown());
}
